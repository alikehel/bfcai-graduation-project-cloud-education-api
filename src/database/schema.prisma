// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String
  firstName             String
  lastName              String
  phoneNumber           String
  password              String
  profilePicture        String?
  // passwordConfirm String
  role                  String                 @default("STUDENT") // ADMIN - TEACHER - STUDENT
  // organizations Organization[]
  organization          Organization           @relation(fields: [organizationSubdomain], references: [subdomain])
  organizationSubdomain String
  courses               Course[]
  managedCourses        Course[]               @relation("Course Owner")
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  // Course                Course[]
  CourseSectionComment  CourseSectionComment[]
  reviewedCourses       String[]
  examResult            ExamResult[]
  Notification          Notification[]

  @@unique([email, organizationSubdomain], name: "emailSubdomain")
  @@map(name: "users")
}

// enum Role {
//   LEARNER
//   TEACHER
//   ADMIN
// }

model Organization {
  // id                  String   @id @default(uuid())
  name                String   @unique
  type                String // University - School - Independent
  emailDomain         String   @unique // bfcai.bu.edu.eg -> blabla@bfcai.bu.edu.eg
  subdomain           String   @id // bfcai -> www.bfcai.cloud-education.com
  officialPhoneNumber String   @unique
  country             String
  address             String
  // users               User[]
  User                User[]
  courses             Course[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map(name: "organizations")
}

model Course {
  id                    String          @id @default(uuid())
  name                  String
  description           String
  code                  String // cs101
  // ------ Test ------ //
  // prerequisites         Course[]       @relation("Prerequisites")
  // prerequisiteOf        Course?        @relation("Prerequisites", fields: [prerequisiteId], references: [id])
  // prerequisiteId        String?
  // prerequisites         String[]
  prerequisites         Course[]        @relation("CoursePrerequisites")
  prerequisiteOf        Course[]        @relation("CoursePrerequisites")
  // ------ End Test ------ //
  isActive              Boolean         @default(false)
  category              String // CS - IS - AI
  organization          Organization    @relation(fields: [organizationSubdomain], references: [subdomain])
  organizationSubdomain String
  users                 User[]
  owner                 User            @relation("Course Owner", fields: [userId], references: [id])
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  // courseSection         CourseSection?
  // CourseAssets          CourseAssets[]
  userId                String
  sections              CourseSection[]
  rating                Float           @default(0)
  ratingCount           Int             @default(0)
  Exam                  Exam[]

  @@unique([code, organizationSubdomain], name: "codeSubdomain")
  @@map(name: "courses")
}

model CourseSection {
  id                   String                 @id @default(uuid())
  content              String?
  order                Int
  title                String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  // course    Course?  @relation(fields: [courseId], references: [id])
  // courseId  String?  @unique
  Course               Course?                @relation(fields: [courseId], references: [id])
  courseId             String?
  CourseSectionComment CourseSectionComment[]

  @@unique([courseId, order], name: "courseOrder")
  @@map(name: "courses_sections")
}

model CourseSectionComment {
  id              String        @id @default(uuid())
  content         String
  courseSection   CourseSection @relation(fields: [courseSectionId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  courseSectionId String
  user            User          @relation(fields: [userId], references: [id])
  userId          String

  @@map(name: "comments")
}

model Exam {
  id          String       @id @default(uuid())
  name        String
  description String
  duration    Int
  startTime   String
  endTime     String
  questions   String
  course      Course       @relation(fields: [courseId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  courseId    String
  examResult  ExamResult[]

  @@map(name: "exams")
}

model ExamResult {
  id          String   @id @default(uuid())
  exam        Exam     @relation(fields: [examId], references: [id])
  examId      String
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  answers     String
  status      String   @default("INPROGRESS") // INPROGRESS - GRADING - FINISHED - MISSED - FAILED
  durationEnd String
  score       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([examId, userId], name: "examId_userId")
  @@map(name: "exams-results")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  extra     String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  @@map(name: "notifications")
}

// model Leaderboard {
//   id        String   @id @default(uuid())
//   user      User     @relation(fields: [userId], references: [id])
//   points    Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userId    String

//   @@map(name: "leaderboard")
// }
