// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String       @id @default(uuid())
  email                 String
  firstName             String
  lastName              String
  phoneNumber           String
  password              String
  // passwordConfirm String
  role                  String       @default("LEARNER") // ADMIN - TEACHER - LEARNER
  // organizations Organization[]
  organization          Organization @relation(fields: [organizationSubdomain], references: [subdomain])
  organizationSubdomain String
  courses               Course[]
  managedCourses        Course[]     @relation("Course Owner")
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  // Course                Course[]

  @@unique([email, organizationSubdomain], name: "emailSubdomain")
  @@map(name: "users")
}

// enum Role {
//   LEARNER
//   TEACHER
//   ADMIN
// }

model Organization {
  // id                  String   @id @default(uuid())
  name                String   @unique
  type                String // University - School - Independent
  emailDomain         String   @unique // bfcai.bu.edu.eg -> blabla@bfcai.bu.edu.eg
  subdomain           String   @id // bfcai -> www.bfcai.cloud-education.com
  officialPhoneNumber String   @unique
  country             String
  address             String
  // users               User[]
  User                User[]
  courses             Course[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map(name: "organizations")
}

model Course {
  id                    String         @id @default(uuid())
  name                  String
  description           String
  code                  String // cs101
  // ------ Test ------ //
  // prerequisites         Course[]       @relation("Prerequisites")
  // prerequisiteOf        Course?        @relation("Prerequisites", fields: [prerequisiteId], references: [id])
  // prerequisiteId        String?
  // prerequisites         String[]
  prerequisites         Course[]       @relation("CoursePrerequisites")
  prerequisiteOf        Course[]       @relation("CoursePrerequisites")
  // ------ End Test ------ //
  isActive              Boolean        @default(false)
  category              String // CS - IS - AI
  organization          Organization   @relation(fields: [organizationSubdomain], references: [subdomain])
  organizationSubdomain String
  users                 User[]
  owner                 User           @relation("Course Owner", fields: [userId], references: [id])
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  courseSection         CourseSection?
  // CourseAssets          CourseAssets[]
  userId                String

  @@unique([code, organizationSubdomain], name: "codeSubdomain")
  @@map(name: "courses")
}

// model CourseAssets {
//   id        String   @id @default(uuid())
//   name      String
//   url       String   @unique
//   type      String // video - pdf - image
//   expiresAt DateTime
//   size      Int
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   course    Course?  @relation(fields: [courseId], references: [id])
//   courseId  String?

//   @@map(name: "course_assets")
// }

model CourseSection {
  id        String   @id @default(uuid())
  content   Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  course    Course?  @relation(fields: [courseId], references: [id])
  courseId  String?  @unique
  // ------ Test ------ //
  // previousId   String?         @unique
  // previous     CourseSection?  @relation("PreviousNext", fields: [previousId], references: [id])
  // next         CourseSection?  @relation("PreviousNext")
  // parentId     String?         @unique
  // parent       CourseSection?  @relation("ParentChild", fields: [parentId], references: [id])
  // childs       CourseSection[] @relation("ParentChild")
  // ------ End Test ------ //

  @@map(name: "course_section")
}

// // Not Complete
// model Exam {
//   id          String   @id @default(uuid())
//   name        String
//   description String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   @@map(name: "exams")
// }

// // Not Complete
// model Comment {
//   id        String   @id @default(uuid())
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map(name: "comments")
// }

// // Not Complete
// model Message {
//   id        String   @id @default(uuid())
//   content   String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map(name: "messages")
// }
